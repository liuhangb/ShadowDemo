plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion rootProject.ext.COMPILE_SDK_VERSION
    buildToolsVersion rootProject.ext.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.tencent.shadow.sample.host"
        minSdkVersion rootProject.ext.MIN_SDK_VERSION
        targetSdkVersion rootProject.ext.TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/sample-manager/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/sample-manager/release/')
            assets.srcDir('build/generated/assets/plugin-zip/release/')
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation files('libs/common-debug.jar')
    implementation files('libs/dynamic-host-debug.jar')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'commons-io:commons-io:2.5'//sample-host从assets中复制插件用的
    implementation 'org.slf4j:slf4j-api:1.7.25'
}

def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {

    def moduleName = 'sample-manager'
    def pluginManagerApkFile = file(
            "${project(":sample-manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ':sample-manager',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )

//    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")
//    generateAssetsTask.dependsOn createCopyTask(
//            ':sample-plugin-app',
//            buildType,
//            'plugin-zip',
//            "plugin-${buildType}.zip",
//            pluginZip,
//            "package${buildType.capitalize()}Plugin"
//    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}